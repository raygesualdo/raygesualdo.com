[
  {
    "title": "Exploring Modularized and Componentized CSS",
    "video": "Coming Soon!",
    "code": "https://github.com/raygesualdo/mcc-demos",
    "slides": "https://docs.google.com/presentation/d/1Ypgy6-f9p-Hkci_H3DRrZnYmia0T1n9bEhhr0B3egAw/pub?start=false&loop=false&delayms=3000",
    "abstract": "CSS. Some of us love it. Others...not so much. However, we can all agree that maintaining CSS in production applications is difficult. It doesn't have to be. Together, we will explore the paradigms of \"modular\" and \"componentized\" CSS and the benefits they bring. We will look at methods and libraries available today that enable us to write scalable CSS in our React applications. And we will walk through multiple practical examples of CSS refactoring using CSS Modules, Aphrodite and styled-components showcasing how you can implement \"modular\" and \"componentized\" CSS."
  },
  {
    "title": "Redux-logic: Redux Side Effects Your Way",
    "slides": "/slides/redux-logic/",
    "abstract": "Keeping our Redux applications tidy can be difficult once we start adding business logic, especially asynchronous code. Where do we write it? How do we write it? And how does our code interact with Redux? Together, we'll answer these questions and more by exploring how redux-logic lets us \"bring our own code\" and integrate it in a structured, declarative way with Redux.\n\nFirst, we'll look at the difficulties related to async code and Redux and what options are out there to solve the problem currently. Next, we'll discuss the features and benefits of using redux-logic. Finally, we'll walk through examples of redux-logic with real use-cases and see how you can implement redux-logic yourself. When we're done, you should have an understanding of how redux-logic works and how it can improve your application code."
  }
]
