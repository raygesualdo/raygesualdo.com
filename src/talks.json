[
  {
    "title": "CSS-in-React with styled-components",
    "slides": "/slides/ct2017-styled-components/",
    "abstract": "CSS in production applications is hard and our industry has worked to mitigate this in multiple ways. Pre/post-processors brought code organization and logic. Class naming conventions helped with specificity. CSS Modules took a big leap forward by providing a certain level of modularity. But CSS never truly matched the level of componentization in its web counterpart, JavaScript...until now. Learn how styled-components leverages React's component paradigm to provide completely modularized and declarative styling in your React applications."
  },
  {
    "title": "Tame the Async Redux Beast with redux-logic",
    "video": "Coming Soon!",
    "slides": "/slides/ct2017-redux-logic/",
    "abstract": "Keeping our Redux applications tidy can be difficult once we start adding business logic, especially asynchronous code. Where do we write it? How do we write it? And how does our code interact with Redux? Together, we'll answer these questions and more by exploring how redux-logic lets us \"bring our own code\" and integrate it in a structured, declarative way with Redux."
  },
  {
    "title": "Exploring Modularized and Componentized CSS",
    "code": "https://github.com/raygesualdo/mcc-demos",
    "slides": "https://docs.google.com/presentation/d/1Ypgy6-f9p-Hkci_H3DRrZnYmia0T1n9bEhhr0B3egAw/pub?start=false&loop=false&delayms=3000",
    "abstract": "CSS. Some of us love it. Others...not so much. However, we can all agree that maintaining CSS in production applications is difficult. It doesn't have to be. Together, we will explore the paradigms of \"modular\" and \"componentized\" CSS and the benefits they bring. We will look at methods and libraries available today that enable us to write scalable CSS in our React applications. And we will walk through multiple practical examples of CSS refactoring using CSS Modules, Aphrodite and styled-components showcasing how you can implement \"modular\" and \"componentized\" CSS."
  }
]
