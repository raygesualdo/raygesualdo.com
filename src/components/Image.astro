---
import type { ImageMetadata, ImageTransform } from 'astro'
import { getImage } from 'astro:assets'
import LoadableImage from './LoadableImage.astro'

type Props = {
  src: ImageMetadata
  alt: string
  /**
   * Array of screens to generate the image for i.e [320, 480, 1200]
   * Maximum width will be 1200 regardless if screen is larger
   */
  deviceSizes?: number[]
  placeholder?: 'blur' | 'empty'
} & Omit<ImageTransform, 'src'> &
  Omit<astroHTML.JSX.ImgHTMLAttributes, 'src' | 'width' | 'height'>

const {
  src,
  format,
  width: propsWidth,
  height,
  quality,
  alt,
  srcset: _,
  loading = 'lazy',
  decoding = 'async',
  sizes,
  deviceSizes = [320, 480, 640, 750, 828, 1200, 1920, 2048, 3840],
  placeholder: placeholderType,
  ...rest
} = Astro.props

if (!src) {
  throw new Error('src is required')
}

const originalWidth = src.width
const originalHeight = src.height
const aspectRatio = originalHeight / originalWidth

// If propsWidth is provided, use it as the maximum size
const maxWidth = propsWidth && propsWidth <= originalWidth ? propsWidth : originalWidth

// Filter out sizes that are larger than the max width
const validSizes = deviceSizes.filter((size) => size <= maxWidth)

const generateSrcSet = async (size: number) => {
  const resizedImg = await getImage({
    src,
    format,
    width: size,
    height: Math.round(size * aspectRatio),
    quality,
  } as ImageTransform)
  return `${resizedImg.src} ${size}w`
}

const srcsetPromises = validSizes.map(generateSrcSet)
const srcsetResults = await Promise.all(srcsetPromises)

const srcset = srcsetResults.join(', ')

const sizesAttrMapped = validSizes.map((size) => `(max-width: ${size}px) ${size}px`).join(', ')

const sizesAttr = `
  ${sizesAttrMapped},
  ${maxWidth}px
`

const original = await getImage({
  src,
  format,
  width: maxWidth,
  height: Math.round(maxWidth * aspectRatio),
  quality,
} as ImageTransform)
---

{
  placeholderType === 'blur' ? (
    <LoadableImage
      src={original.src}
      srcset={srcset}
      sizes={sizes || sizesAttr}
      alt={alt}
      loading={loading}
      decoding={decoding}
      srcMeta={src}
      generated={original}
      {...(rest as any)}
    />
  ) : (
    <img
      src={original.src}
      srcset={srcset}
      sizes={sizes || sizesAttr}
      alt={alt}
      loading={loading}
      decoding={decoding}
      {...rest}
    />
  )
}
