- 
  title: "GraphQL in a Serverless World"
  slides: "https://rayg.me/connecttech2018-graphql"
  code: "https://github.com/raygesualdo/serverless-graphql-demo"
  abstract: > 
    "GraphQL" and "Serverless" generate a lot of industry buzz separately. Combining slick serverless paradigms with the statically-typed goodness of GraphQL may just break the internet...but that's what we're going to do. Together, we'll briefly cover what "serverless" means and how GraphQL works. Then, we'll construct a simple GraphQL API from scratch using open-source tools and deploy the API to multiple serverless environments. Finally, we'll discuss the benefits and tradeoffs of deploying a GraphQL API in a serverless fashion.
-
  title: "Using Gatsby to Supercharge Your Static Sites"
  slides: "https://rayg.me/connecttech2018-gatsby"
  abstract: "Static site generators have been around for the better part of a decade, but they've seen a resurgence in popularity recently and for good reason. Static sites provide significant benefits - performance, security, durability, ease of deployment - to developers, content creators, and consumers alike. Not all static site generators are created equal, however. Gatsby supercharges the process and brings many unique strengths to the table, including a strong plugin ecosystem, a data fetching layer based on GraphQL, the ability to collate data from multiple sources, and Progressive Web App functionality infused into the static sites it generates. Together, we'll explore these strengths and more as we delve into why Gatsby is one of the top static site generators in the industry."
# -
#   title: "Rockin' the JAMstack with Gatsby"
#   slides: "/slides/jazzcon2018-gatsby/"
#   code: "https://github.com/raygesualdo/gatsby-multiple-sources-demo"
#   abstract: "Static site generators are one of the hottest trends right now in front-end development and for good reason. In a world of CMSes, databases, templating engines, and application servers, static sites provide significant benefits to developers, content creators, and consumers alike. Together, we'll explore these benefits while creating a static site using the popular Gatsby static site generator."
-
  title: "Tame the Async Redux Beast with redux-logic"
  video: "https://www.recallact.com/presentation/tame-async-redux-beast-redux-logic"
  slides: "/slides/jazzcon2018-redux-logic/"
  abstract: "Keeping our Redux applications tidy can be difficult once we start adding business logic, especially asynchronous code. Where do we write it? How do we write it? And how does our code interact with Redux? Together, we'll answer these questions and more by exploring how redux-logic lets us \"bring our own code\" and integrate it in a structured, declarative way with Redux."
-
  title: "CSS-in-React with styled-components"
  slides: "/slides/ct2017-styled-components/"
  abstract: "CSS in production applications is hard and our industry has worked to mitigate this in multiple ways. Pre/post-processors brought code organization and logic. Class naming conventions helped with specificity. CSS Modules took a big leap forward by providing a certain level of modularity. But CSS never truly matched the level of componentization in its web counterpart, JavaScript...until now. Learn how styled-components leverages React's component paradigm to provide completely modularized and declarative styling in your React applications."
-
  title: "Exploring Modularized and Componentized CSS"
  code: "https://github.com/raygesualdo/mcc-demos"
  slides: "https://docs.google.com/presentation/d/1Ypgy6-f9p-Hkci_H3DRrZnYmia0T1n9bEhhr0B3egAw/pub?start=false&loop=false&delayms=3000"
  abstract: "CSS. Some of us love it. Others...not so much. However, we can all agree that maintaining CSS in production applications is difficult. It doesn't have to be. Together, we will explore the paradigms of \"modular\" and \"componentized\" CSS and the benefits they bring. We will look at methods and libraries available today that enable us to write scalable CSS in our React applications. And we will walk through multiple practical examples of CSS refactoring using CSS Modules, Aphrodite and styled-components showcasing how you can implement \"modular\" and \"componentized\" CSS."
